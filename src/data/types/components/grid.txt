// Types
import type { E<%camel%>Device } from '<%typesImport%>';

type T<%camel%>GridSafeAlignment<T extends string> = `${'safe' | 'unsafe'} ${T}`;

type T<%camel%>GridJustifyKeys =
    | 'normal'
    | 'stretch'
    | 'center'
    | 'start'
    | 'flex-start'
    | 'end'
    | 'flex-end'
    | 'left'
    | 'right'
    | 'space-between'
    | 'space-around'
    | 'space-evenly';

type T<%camel%>GridJustifyItemsKeys = T<%camel%>GridJustifyKeys | 'self-start' | 'self-end' | 'anchor-center';

type T<%camel%>GridAlignKeys =
    | 'normal'
    | 'stretch'
    | 'center'
    | 'start'
    | 'flex-start'
    | 'end'
    | 'flex-end'
    | 'baseline'
    | 'first baseline'
    | 'last baseline';

type T<%camel%>GridAlignContentKeys =
    | T<%camel%>GridAlignKeys
    | 'space-between'
    | 'space-around'
    | 'space-evenly';

type T<%camel%>GridJustify =
    | T<%camel%>GridJustifyKeys
    | T<%camel%>GridSafeAlignment<T<%camel%>GridJustifyKeys>
    | `legacy ${T<%camel%>GridJustifyKeys}`;

type T<%camel%>GridJustifyItems =
    | T<%camel%>GridJustifyItemsKeys
    | T<%camel%>GridSafeAlignment<T<%camel%>GridJustifyItemsKeys>
    | `legacy ${T<%camel%>GridJustifyItemsKeys}`;

type T<%camel%>GridAlign = T<%camel%>GridAlignKeys | T<%camel%>GridSafeAlignment<T<%camel%>GridAlignKeys>;

type T<%camel%>GridAlignContent =
    | T<%camel%>GridAlignContentKeys
    | T<%camel%>GridSafeAlignment<T<%camel%>GridAlignContentKeys>;

export const <%upper%>_GRID_GAP = {} as const;

export type E<%camel%>GridGap = (typeof <%upper%>_GRID_GAP)[keyof typeof <%upper%>_GRID_GAP];

export const <%upper%>_GRID_ROW_GAP = {} as const;

export type E<%camel%>GridRowGap = (typeof <%upper%>_GRID_ROW_GAP)[keyof typeof <%upper%>_GRID_ROW_GAP];

export const <%upper%>_GRID_COLUMN_GAP = {} as const;

export type E<%camel%>GridColumnGap = (typeof <%upper%>_GRID_COLUMN_GAP)[keyof typeof <%upper%>_GRID_COLUMN_GAP];

export interface I<%camel%>GridProps {
    /** Tag of the element defining the grid */
    tag?: string;

    /** Number of columns in the grid */
    cols?: number | number[] | string | string[];

    /** Number of rows in the grid */
    rows?: number | number[] | string | string[];

    /** Grid direction */
    flow?: string | string[];

    /** Height of an element that goes beyond the specified grid */
    autoRows?: string | string[];

    /** Length of element that goes beyond the specified grid */
    autoCols?: string | string[];

    /** align-items css property */
    align?: T<%camel%>GridAlign | T<%camel%>GridAlign[] | null;

    /** align-content css property */
    alignContent?: T<%camel%>GridAlignContent | T<%camel%>GridAlignContent[] | null;

    /** justify-content css property */
    justify?: T<%camel%>GridJustify | T<%camel%>GridJustify[] | null;

    /** justify-items css property */
    justifyItems?: T<%camel%>GridJustifyItems | T<%camel%>GridJustifyItems[] | null;

    /** Grid margin size */
    gap?: E<%camel%>GridGap | E<%camel%>GridGap[] | null;

    /** Grid row indent size */
    rowGap?: E<%camel%>GridGap | E<%camel%>GridGap[] | null;

    /** Grid column indent size */
    columnGap?: E<%camel%>GridGap | E<%camel%>GridGap[] | null;

    /** Breakpoints for responsive design */
    devices?: E<%camel%>Device[];
}
