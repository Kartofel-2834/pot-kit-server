<script lang="ts" setup>
// Types
import type { Ref } from 'vue';
import type { I<%camel%>PopoverExpose, I<%camel%>PopoverProps } from '<%typesImport%>/components/popover';
import type { EDialogLayers } from '<%typesImport%>/composables/dialog';

// Constants
import { <%upper%>_ATTACHED_BOX_POSITION } from '<%typesImport%>/components/attach-target';
import { DIALOG_LAYERS } from '<%typesImport%>/composables/dialog';

// Vue
import { computed, inject, onUnmounted, provide, readonly, ref, watch } from 'vue';

// Composables
import { useDialog, useDialogLayer, useDialogZIndex } from '<%composablesImport%>/dialog';
import { useDeviceIs } from '<%composablesImport%>/device-is';
import { useDeviceProperties } from '<%composablesImport%>/device-properties';
import { useClassList } from '<%composablesImport%>/class-list';
import { useFocusTrap } from '<%composablesImport%>/focus-trap';

// Components
import <%camel%>AttachTarget from '<%componentsImport%>/<%camel%>AttachTarget.vue';

const $layer = DIALOG_LAYERS.POPOVER as EDialogLayers;
const $parentLayer = inject<Ref<EDialogLayers>>('<%kebab%>-dialog-layer', ref(DIALOG_LAYERS.NONE));

const $props = withDefaults(defineProps<I<%camel%>PopoverProps>(), {
    visible: undefined,
    modelValue: undefined,
    position: <%upper%>_ATTACHED_BOX_POSITION.TOP_CENTER,
    nudge: 10,
    edgeMargin: 10,
    persistent: false,
    noSticky: false,
    noAutoFocus: false,
    noFocusTrap: false,
    to: 'body',
    transition: '<%kebab%>-popover-transition',
});

const $emit = defineEmits<{
    open: [];
    close: [];
    'update:modelValue': [isVisible: boolean];
}>();

const $dialog = useDialog({
    triggers: ['clickoutside', 'escape'],
    isOpen: computed(() => Boolean($props.visible ?? $props.modelValue)),
    layer: computed(() => useDialogLayer($layer, $parentLayer.value)),
    close: close,
    open: open,
});

const $deviceIs = useDeviceIs();

const $focusTrap = useFocusTrap();

// Data
const box = ref<Element | null>(null);
const attachTarget = ref<InstanceType<typeof <%camel%>AttachTarget> | null>(null);

// Lifecycle
onUnmounted(() => $dialog.terminate());

// Computed
const teleportTo = computed(() => $props.to ?? 'body');

const properties = computed(() => {
    return useDeviceProperties(
        {
            position: $props.position,
            nudge: $props.nudge,
            edgeMargin: $props.edgeMargin,
            color: $props.color,
            size: $props.size,
            radius: $props.radius,
        },
        $deviceIs.device.value,
        $props.devices,
    );
});

const classList = computed(() => useClassList({ ...properties.value }));

const currentStyles = computed(() => {
    const [x, y] = attachTarget.value?.boxCoordinates ?? [0, 0];

    return {
        zIndex: useDialogZIndex($dialog),
        transform: `translate(${x}px, ${y}px)`,
    };
});

// Watchers
watch(
    () => [box.value, $props.noFocusTrap],
    newValue => {
        const [box] = newValue;

        if (box instanceof Element) {
            $focusTrap.setup(box, {
                trap: !$props.noFocusTrap,
                autofocus: !$props.noAutoFocus,
            });
        } else {
            $focusTrap.terminate();
        }
    },
);

// Methods
function open() {
    $emit('open');
    $emit('update:modelValue', true);
}

function close() {
    $emit('close');
    $emit('update:modelValue', false);
}

// Exports
provide('<%kebab%>-dialog-layer', $dialog.layer);

defineExpose<I<%camel%>PopoverExpose>({
    isOpen: readonly($dialog.isOpen),
    coordinates: attachTarget.value?.boxCoordinates,
    target: attachTarget.value?.target as Element,
    popover: box.value,
    open: () => $dialog.open(),
    close: () => $dialog.close(),
});
</script>

<template>
    <Teleport
        :to="teleportTo"
        :disabled="!to"
    >
        <Transition :name="transition">
            <div
                ref="box"
                v-if="$dialog.isOpen.value"
                v-bind="$attrs"
                :key="`${$dialog.id.description}_${$dialog.isOpen.value}`"
                :class="['<%kebab%>-popover', classList]"
                :style="currentStyles"
                :data-<%kebab%>-dialog-id="$dialog.id.description"
            >
                <slot />
            </div>
        </Transition>
    </Teleport>

    <<%camel%>AttachTarget
        ref="attachTarget"
        :box="box"
        :position="properties.position"
        :edge-margin="properties.edgeMargin"
        :nudge="properties.nudge"
        :target="target"
        :sticky="!noSticky"
        :persistent="persistent"
    >
        <slot name="target" />
    </<%camel%>AttachTarget>
</template>

<style>
.<%kebab%>-popover {
    /* --- Color - Configuration --- */
    --<%kebab%>-popover-color-background: transparent;
    --<%kebab%>-popover-color-border: transparent;
    --<%kebab%>-popover-color-text: inherit;

    /* --- Size - Configuration --- */
    --<%kebab%>-popover-size-border: 0;
    --<%kebab%>-popover-size-padding: 0;
    --<%kebab%>-popover-size-shadow: none;
    --<%kebab%>-popover-size-text: inherit;

    /* --- Radius - Configuration --- */
    --<%kebab%>-popover-radius-value: 0;

    position: fixed;
    top: 0;
    left: 0;
    border-style: solid;

    /* --- <%camel%>Popover - Color --- */
    border-color: var(--<%kebab%>-popover-color-border);
    background-color: var(--<%kebab%>-popover-color-background);
    color: var(--<%kebab%>-popover-color-text);

    /* --- <%camel%>Popover - Size --- */
    border-width: var(--<%kebab%>-popover-size-border);
    padding: var(--<%kebab%>-popover-size-padding);
    box-shadow: var(--<%kebab%>-popover-size-shadow);
    font-size: var(--<%kebab%>-popover-size-text);

    /* --- <%camel%>Popover - Radius --- */
    border-radius: var(--<%kebab%>-popover-radius-value);
}

.<%kebab%>-popover-transition-enter-active,
.<%kebab%>-popover-transition-leave-active {
    transition: opacity 0.2s ease;
}

.<%kebab%>-popover-transition-enter-from,
.<%kebab%>-popover-transition-leave-to {
    opacity: 0;
}
</style>