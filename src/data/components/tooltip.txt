<script
    lang="ts"
    generic="TOpenTriggers extends string[] = string[], TCloseTriggers extends string[] = string[]"
    setup
>
// Types
import type { Ref } from 'vue';
import type { I<%camel%>TooltipExpose, I<%camel%>TooltipProps } from '<%typesImport%>/components/tooltip';
import type { EDialogLayers } from '<%typesImport%>/composables/dialog';

// Constants
import { DIALOG_LAYERS } from '<%typesImport%>/composables/dialog';

// Vue
import { computed, inject, onUnmounted, provide, readonly, ref, watch } from 'vue';

// Composables
import { useDialog, useDialogLayer, useDialogZIndex } from '<%composablesImport%>/dialog';
import { useDeviceProperties } from '<%composablesImport%>/device-properties';
import { useDeviceIs } from '<%composablesImport%>/device-is';
import { useClassList } from '<%composablesImport%>/class-list';

// Components
import <%camel%>AttachTarget from '<%componentsImport%>/<%camel%>AttachTarget.vue';

const isOpen = ref<boolean>(false);

const $layer = DIALOG_LAYERS.POPOVER as EDialogLayers;
const $parentLayer = inject<Ref<EDialogLayers>>('<%kebab%>-dialog-layer', ref(DIALOG_LAYERS.NONE));

const $props = withDefaults(defineProps<I<%camel%>TooltipProps<TOpenTriggers, TCloseTriggers>>(), {
    text: '',
    to: 'body',
    openDelay: 0,
    closeDelay: 200,
    autoCloseDelay: 0,
    openTriggers: () => ['mouseover', 'focus'] as TOpenTriggers,
    closeTriggers: () => ['mouseout', 'blur'] as TCloseTriggers,
    enterable: false,
    transition: '<%kebab%>-tooltip-transition',
});

const $emit = defineEmits<{
    open: [];
    close: [];
    'trigger:open': [event: Event, trigger: string];
    'trigger:close': [event: Event, trigger: string];
}>();

const $deviceIs = useDeviceIs();

const $dialog = useDialog({
    triggers: ['escape'],
    isOpen: computed(() => isOpen.value),
    layer: computed(() => useDialogLayer($layer, $parentLayer?.value)),
    close: close,
    open: open,
});

// Data
const box = ref<Element | null>(null);
const attachTarget = ref<InstanceType<typeof <%camel%>AttachTarget> | null>(null);

const delayedAction = ref<{ timeoutId: number; action: Function | null; delay: number }>({
    timeoutId: NaN,
    action: null,
    delay: 0,
});

// Lifecycle
onUnmounted(() => {
    $dialog.terminate();

    if (attachTarget.value?.target) {
        terminateTargetTriggers(attachTarget.value.target as Element);
    }

    if (box.value) {
        terminateBoxListeners(box.value as Element);
    }
});

// Computed
const teleportTo = computed(() => $props.to ?? 'body');

const properties = computed(() => {
    return useDeviceProperties(
        {
            position: $props.position,
            nudge: $props.nudge,
            edgeMargin: $props.edgeMargin,
            color: $props.color,
            size: $props.size,
            radius: $props.radius,
        },
        $deviceIs.device.value,
        $props.devices,
    );
});

const classList = computed(() => useClassList({ ...properties.value }));

const currentStyles = computed(() => {
    const [x, y] = attachTarget.value?.boxCoordinates ?? [0, 0];

    return {
        zIndex: useDialogZIndex($dialog),
        transform: `translate(${x}px, ${y}px)`,
    };
});

// Watchers
watch(
    () => [attachTarget.value?.target, $props.openTriggers, $props.closeTriggers],
    (newValue, oldValue) => {
        const [newTarget] = newValue;
        const [oldTarget] = oldValue;

        if (oldTarget instanceof Element) terminateTargetTriggers(oldTarget);
        if (newTarget instanceof Element) setupTargetTriggers(newTarget);
    },
);

watch(
    () => [box.value, $props.enterable],
    (newValue, oldValue) => {
        const [boxElement, enterable] = newValue;
        const [oldBoxElement] = oldValue;

        if (!enterable) return;

        if (oldBoxElement instanceof Element) {
            terminateBoxListeners(oldBoxElement);
        }

        if (boxElement instanceof Element) {
            setupBoxListeners(boxElement);
        }
    },
);

// Methods
function open() {
    if (isOpen.value) return;

    clearDelayedAction();
    isOpen.value = true;
    $emit('open');

    if ($props.autoCloseDelay > 0) startAutoClose();
}

function close() {
    if (!isOpen.value) return;

    clearDelayedAction();
    isOpen.value = false;
    $emit('close');
}

function delayedOpen(event: Event, trigger: TOpenTriggers[number]): number {
    return setDelayedAction(() => {
        if (isOpen.value) return;

        $emit('trigger:open', event, trigger);
        open();
    }, $props.openDelay);
}

function delayedClose(event: Event, trigger: string): number {
    return setDelayedAction(() => {
        if (!isOpen.value) return;

        $emit('trigger:close', event, trigger);
        close();
    }, $props.closeDelay);
}

function startAutoClose(): number {
    if ($props.autoCloseDelay <= 0 || isNaN($props.autoCloseDelay)) return NaN;

    return setDelayedAction(() => {
        if (!isOpen.value) return;

        isOpen.value = false;
        $emit('close');
    }, $props.autoCloseDelay);
}

function pause() {
    clearTimeout(delayedAction.value.timeoutId);
    delayedAction.value = { ...delayedAction.value, timeoutId: NaN };
}

function resume() {
    setDelayedAction(delayedAction.value.action, delayedAction.value.delay);
}

function clearDelayedAction() {
    clearTimeout(delayedAction.value.timeoutId);
    delayedAction.value = { action: null, timeoutId: NaN, delay: 0 };
}

function setDelayedAction(action: Function | null, delay: number): number {
    if (!action) return NaN;

    clearTimeout(delayedAction.value.timeoutId);
    const timeoutId = delay ? setTimeout(action, delay) : NaN;

    if (!delay) action();

    delayedAction.value = {
        action: delay ? action : null,
        timeoutId,
        delay,
    };

    return timeoutId;
}

function setupTargetTriggers(element: Element) {
    if (!element) return;

    $props.closeTriggers?.forEach?.(trigger =>
        element.addEventListener(trigger, (event: Event) => delayedClose(event, trigger)),
    );
    $props.openTriggers?.forEach?.(trigger =>
        element.addEventListener(trigger, (event: Event) => delayedOpen(event, trigger)),
    );
}

function terminateTargetTriggers(element: Element) {
    if (!element) return;

    $props.closeTriggers?.forEach?.(trigger =>
        element.removeEventListener(trigger, (event: Event) => delayedClose(event, trigger)),
    );
    $props.openTriggers?.forEach?.(trigger =>
        element.removeEventListener(trigger, (event: Event) => delayedOpen(event, trigger)),
    );
}

function setupBoxListeners(element: Element) {
    if (!element) return;

    element.addEventListener('mouseover', pause);
    element.addEventListener('mouseout', resume);
}

function terminateBoxListeners(element: Element) {
    if (!element) return;

    element.removeEventListener('mouseover', pause);
    element.removeEventListener('mouseout', resume);
}

// Exports
provide('<%kebab%>-dialog-layer', $dialog.layer);

defineExpose<I<%camel%>TooltipExpose>({
    isOpen: readonly(isOpen),
    coordinates: attachTarget.value?.boxCoordinates,
    target: attachTarget.value?.target as Element,
    tooltip: box.value,
    open,
    close,
    delayedOpen,
    delayedClose,
    pause,
    resume,
    clearDelayedAction,
});
</script>

<template>
    <Teleport
        :to="teleportTo"
        :disabled="!to"
    >
        <Transition :name="transition">
            <div
                ref="box"
                v-if="$dialog.isOpen.value"
                v-bind="$attrs"
                :key="`${$dialog.id.description}_${$dialog.isOpen.value}`"
                :class="['<%kebab%>-tooltip', classList]"
                :style="currentStyles"
                :data-<%kebab%>-dialog-id="$dialog.id.description"
            >
                <slot name="content">
                    {{ text }}
                </slot>
            </div>
        </Transition>
    </Teleport>

    <<%camel%>AttachTarget
        ref="attachTarget"
        :box="box"
        :position="properties.position"
        :edge-margin="properties.edgeMargin"
        :nudge="properties.nudge"
        :target="target"
        :to="to"
        :sticky="!noSticky"
        :persistent="persistent"
    >
        <slot />
    </<%camel%>AttachTarget>
</template>

<style>
.<%kebab%>-tooltip {
    /* --- Color - Configuration --- */
    --<%kebab%>-tooltip-color-background: transparent;
    --<%kebab%>-tooltip-color-border: transparent;
    --<%kebab%>-tooltip-color-text: inherit;

    /* --- Size - Configuration --- */
    --<%kebab%>-tooltip-size-border: 0;
    --<%kebab%>-tooltip-size-padding: 0;
    --<%kebab%>-tooltip-size-shadow: none;
    --<%kebab%>-tooltip-size-text: inherit;

    /* --- Radius - Configuration --- */
    --<%kebab%>-tooltip-radius-value: 0;

    position: fixed;
    top: 0;
    left: 0;
    border-style: solid;

    /* --- <%camel%>Tooltip - Color --- */
    border-color: var(--<%kebab%>-tooltip-color-border);
    background-color: var(--<%kebab%>-tooltip-color-background);
    color: var(--<%kebab%>-tooltip-color-text);

    /* --- <%camel%>Tooltip - Size --- */
    border-width: var(--<%kebab%>-tooltip-size-border);
    padding: var(--<%kebab%>-tooltip-size-padding);
    box-shadow: var(--<%kebab%>-tooltip-size-shadow);
    font-size: var(--<%kebab%>-tooltip-size-text);

    /* --- <%camel%>Tooltip - Radius --- */
    border-radius: var(--<%kebab%>-tooltip-radius-value);
}

.<%kebab%>-tooltip-transition-enter-active,
.<%kebab%>-tooltip-transition-leave-active {
    transition: opacity 0.2s ease;
}

.<%kebab%>-tooltip-transition-enter-from,
.<%kebab%>-tooltip-transition-leave-to {
    opacity: 0;
}
</style>