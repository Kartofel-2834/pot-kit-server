<script lang="ts" generic="T = unknown" setup>
// Types
import type { Ref } from 'vue';
import type { I<%camel%>ToastExpose, I<%camel%>ToastProps } from '<%typesImport%>/components/toast';
import type { IToastDialog } from '<%typesImport%>/composables/toast';
import type { EDialogLayers } from '<%typesImport%>/composables/dialog';

// Constants
import { <%upper%>_TOAST_POSITION } from '<%typesImport%>/components/toast';
import { DIALOG_LAYERS } from '<%typesImport%>/composables/dialog';

// Vue
import { computed, ref, inject, onUnmounted, provide } from 'vue';

// Composables
import { useToast } from '<%composablesImport%>/toast';
import { useClassList } from '<%composablesImport%>/class-list';
import { useDeviceProperties } from '<%composablesImport%>/device-properties';
import { useDeviceIs } from '<%composablesImport%>/device-is';
import { useDialog, useDialogLayer, useDialogZIndex } from '<%composablesImport%>/dialog';

const $layer = DIALOG_LAYERS.TOAST as EDialogLayers;
const $parentLayer = inject<Ref<EDialogLayers>>('<%kebab%>-dialog-layer', ref(DIALOG_LAYERS.NONE));

const $props = withDefaults(defineProps<I<%camel%>ToastProps<T>>(), {
    group: undefined,
    position: <%upper%>_TOAST_POSITION.TOP_LEFT,
    to: 'body',
    transition: '<%kebab%>-toast-transition',
});

const $deviceIs = useDeviceIs();

const $toast = useToast<T>();

const $dialog = useDialog({
    triggers: [],
    isOpen: computed(() => Boolean($toast.list.value.length)),
    layer: computed(() => useDialogLayer($layer, $parentLayer.value)),
    close: pop,
    open: () => {},
});

// Data
const toastDialogsList = ref<HTMLElement[]>([]);

// Lifecycle
onUnmounted(() => {
    $dialog.terminate();
});

// Computed
const toastsList = computed(() => {
    return $toast.list.value.filter(toast => toast.group === $props.group) as IToastDialog<T>[];
});

const teleportTo = computed(() => $props.to ?? 'body');

const properties = computed(() => {
    return useDeviceProperties(
        {
            position: $props.position,
            size: $props.size,
            color: $props.color,
            radius: $props.radius,
        },
        $deviceIs.device.value,
        $props.devices,
    );
});

const classList = computed(() => useClassList({ ...properties.value }));

const currentStyles = computed(() => ({
    zIndex: useDialogZIndex($dialog),
}));

// Methods
function getData(toast: IToastDialog): T {
    return toast.data as T;
}

function pop() {
    const firstToast = $toast.list.value[0];
    if (firstToast) close(firstToast.id);
}

function close(id: Symbol) {
    $toast.remove(id);
}

// Exports
provide('<%kebab%>-dialog-layer', $dialog.layer);

defineExpose<I<%camel%>ToastExpose<T>>({
    list: toastsList,
    pop,
    close,
});
</script>

<template>
    <Teleport
        :to="teleportTo"
        :disabled="!to"
    >
        <TransitionGroup
            :name="transition"
            :class="['<%kebab%>-toast', classList]"
            :style="currentStyles"
            tag="div"
            role="alert"
        >
            <div
                v-for="(toastDialog, index) in toastsList"
                :key="toastDialog.id.description"
                ref="toastDialogsList"
                class="<%kebab%>-toast__item"
            >
                <div class="<%kebab%>-toast__item__container">
                    <slot
                        :id="toastDialog.id"
                        :data="getData(toastDialog)"
                        :index="index"
                        :close="() => close(toastDialog.id)"
                    >
                        {{ toastDialog.data }}
                    </slot>
                </div>
            </div>
        </TransitionGroup>
    </Teleport>
</template>

<style>
.<%kebab%>-toast {
    /* --- Color - Configuration --- */
    --<%kebab%>-toast-color-background: transparent;
    --<%kebab%>-toast-color-border: transparent;
    --<%kebab%>-toast-color-text: inherit;

    /* --- Size - Configuration --- */
    --<%kebab%>-toast-size-border: 0;
    --<%kebab%>-toast-size-padding: 0;
    --<%kebab%>-toast-size-shadow: none;
    --<%kebab%>-toast-size-text: inherit;
    --<%kebab%>-toast-size-edge-margin: 20px;
    --<%kebab%>-toast-size-gap: 20px;

    /* --- Radius - Configuration --- */
    --<%kebab%>-toast-radius-value: 0;

    position: fixed;
    display: flex;
    flex-direction: column;
}

.<%kebab%>-toast__item {
    position: relative;
    max-height: 1000px;
}

.<%kebab%>-toast__item__container {
    border-style: solid;

    /* --- <%camel%>Tooltip - Color --- */
    border-color: var(--<%kebab%>-toast-color-border);
    background-color: var(--<%kebab%>-toast-color-background);
    color: var(--<%kebab%>-toast-color-text);

    /* --- <%camel%>Tooltip - Size --- */
    border-width: var(--<%kebab%>-toast-size-border);
    padding: var(--<%kebab%>-toast-size-padding);
    box-shadow: var(--<%kebab%>-toast-size-shadow);
    font-size: var(--<%kebab%>-toast-size-text);

    /* --- <%camel%>Tooltip - Radius --- */
    border-radius: var(--<%kebab%>-toast-radius-value);
}

.<%kebab%>-toast._position-top-left .<%kebab%>-toast__item__container,
.<%kebab%>-toast._position-top-center .<%kebab%>-toast__item__container,
.<%kebab%>-toast._position-top-right .<%kebab%>-toast__item__container {
    margin-bottom: var(--<%kebab%>-toast-size-gap);
}

.<%kebab%>-toast._position-bottom-left .<%kebab%>-toast__item__container,
.<%kebab%>-toast._position-bottom-center .<%kebab%>-toast__item__container,
.<%kebab%>-toast._position-bottom-right .<%kebab%>-toast__item__container {
    margin-top: var(--<%kebab%>-toast-size-gap);
}

/* --- Toast - Position - Top-left  --- */
.<%kebab%>-toast._position-top-left {
    top: var(--<%kebab%>-toast-size-edge-margin);
    left: var(--<%kebab%>-toast-size-edge-margin);
}

/* --- Toast - Position - Top-center  --- */
.<%kebab%>-toast._position-top-center {
    top: var(--<%kebab%>-toast-size-edge-margin);
    left: 50%;
    transform: translateX(-50%);
}

/* --- Toast - Position - Top-right  --- */
.<%kebab%>-toast._position-top-right {
    top: var(--<%kebab%>-toast-size-edge-margin);
    right: var(--<%kebab%>-toast-size-edge-margin);
}

/* --- Toast - Position - Bottom-left  --- */
.<%kebab%>-toast._position-bottom-left {
    flex-direction: column-reverse;
    bottom: var(--<%kebab%>-toast-size-edge-margin);
    left: var(--<%kebab%>-toast-size-edge-margin);
}

/* --- Toast - Position - Bottom-center  --- */
.<%kebab%>-toast._position-bottom-center {
    flex-direction: column-reverse;
    bottom: var(--<%kebab%>-toast-size-edge-margin);
    left: 50%;
    transform: translateX(-50%);
}

/* --- Toast - Position - Bottom-right  --- */
.<%kebab%>-toast._position-bottom-right {
    flex-direction: column-reverse;
    bottom: var(--<%kebab%>-toast-size-edge-margin);
    right: var(--<%kebab%>-toast-size-edge-margin);
}

/* --- Transition - Toast --- */
.<%kebab%>-toast-transition-enter-active,
.<%kebab%>-toast-transition-leave-active {
    transition:
        max-height 0.45s cubic-bezier(0, 1, 0, 1),
        opacity 0.2s,
        margin-bottom 0.4s,
        margin-top 0.4s;
}

.<%kebab%>-toast-transition-enter-from,
.<%kebab%>-toast-transition-leave-to {
    opacity: 0;
    margin-bottom: 0;
    margin-top: 0;
    max-height: 0;
}
</style>